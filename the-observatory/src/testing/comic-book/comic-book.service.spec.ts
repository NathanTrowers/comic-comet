import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';
import { TestBed } from '@angular/core/testing';

import { ComicBookService } from 'src/app/comic-book/comic-book.service';
import ComicBook from 'src/app/comic-book/interfaces/ComicBook';

describe('Comic Book Service Test Suite', () => {
    let comicBookService: ComicBookService;
    let comicBook: ComicBook;

    beforeEach(() => {
        TestBed.configureTestingModule({
    imports: [],
    providers: [provideHttpClient(withInterceptorsFromDi())]
});
        comicBookService = TestBed.inject(ComicBookService);
        comicBook = {
            comicBookId: '7963b34d-7c0a-42cd-964a-93b31e7c8f34',
            name:        'Test Comic Book',
            author:      'Test The Author',
            price:       1.99,
            quantity:    7,
            coverArt:    '',
            carryStatus: 'carrying',
            _links: {
              self: {
                  href: 'http/localhost:8090/comic-books/7963b34d-7c0a-42cd-964a-93b31e7c8f34'
              },
              comicBooks: {
                  "href": 'http/localhost:8090/comic-books'
              }
            }
        };
    });

    it('tests that the ComicBookService is created', ()  => {
        /** Expectation */
        expect(comicBookService).toBeDefined();
    });

    it('tests "getSrcString" returns an the "Cover Coming Soon" image path when no cover art is given', ()  => {
        /** Call to Test */
        let result: string = comicBookService.getSrcString(comicBook.coverArt);

        /** Expectation */
        expect(result).toEqual('/assets/cover-coming-soon.png');
    });

    it('tests "getSrcString" returns an encoded image string when a cover art string is given', ()  => {
        /** Data */
        comicBook.coverArt = '';
        let expectedResult: string = `data:image/png;base64,${comicBook.coverArt}`;

        /** Call to Test */
        let result: string = comicBookService.getSrcString(comicBook.coverArt);

        /** Expectation */
        expect(result).toEqual(expectedResult);
    });
});

